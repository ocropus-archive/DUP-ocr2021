#!/bin/bash

set -e

export OMP_NUM_THREADS=1

image=ocr2021
remimage=tmbdev/$image

die() {
    echo "ERROR: $*"
    exit 1
}

cmd_venv() { # set up a virtualenv
    test -f venv/bin/activate || python3 -m venv venv
    source venv/bin/activate
    pip3 install -U pip
    pip3 install numpy
    pip3 install --pre torch torchvision -f https://download.pytorch.org/whl/nightly/cu102/torch_nightly.html
    pip3 install -U -r requirements.txt
    pip3 install -U jupyterlab
    pip3 install -U bash_kernel
    python -m bash_kernel.install
    pip3 install -U pytest
    jupyter kernelspec list
}

cmd_lab() { # run jupyter lab in the environment
    set -e
    source venv/bin/activate
    jupyter lab "$@"
}

cmd_clean() { # remove temporary files
    rm -f *-info.txt
    rm -f *.pth *.pth.tar
    rm -f *.log
}

cmd_cleanlogs() { # clean up log files
    source venv/bin/activate
    mkdir -p ./JUNK
    mv -v $(python3 -m ocropus.slog findempty *.sqlite3) ./JUNK/.
}

cmd_build() {  # build the docker container
    (cd docker && docker build - -t ocr2021-base "$@" < Dockerfile-base)
    (cd docker && docker build --no-cache . -t $image)
}

cmd_pushk8s() {  # push to local microk8s registry
    docker tag ocr2021 localhost:32000/ocr2021
    docker push localhost:32000/ocr2021
}

cmd_push() {  # push to docker
    docker tag ocr2021 tmbdev/ocr2021
    docker push tmbdev/ocr2021
}

cmd_help() { # help message
echo
echo available commands:
echo
grep '^cmd_[_0-9a-z]*() {' $0 | sed 's/cmd_//;s/\(.*\)() *{* *#* */\1 -- /'
}

cmd=${1:-help}
shift
case $cmd in
help)
    echo; echo available commands:; echo
    grep '^cmd_[_0-9a-z]*() {' "$0" | sed 's/cmd_//;s/\(.*\)() *{* *#* */\1 -- /'
    ;;
*.py)
    # cmd_versions
    set -e
    # hg status grep -v '^M ' > /dev/null
    cmd_venv > venv.log
    source venv/bin/activate
    export OMP_NUM_THREADS=1
    python3 "$cmd" "$@"
    ;;
*)
    set -e
    "cmd_$cmd" "$@"
    ;;
esac

